# Workflow to build and push the imgages for the schulcloud antivirus service 
# Tagging of the images push to Docker Hub  will follow the branch based naming conventions
# use in sc-app-ci to allow deploying the images on team machines  

name: sc-app-build-push

# Controls when the action will run.
on:
  workflow_dispatch:
    branches:
      - develop
      - master
      # TODO Translate in to Github syntax:https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-syntax-for-github-actions#filter-pattern-cheat-sheet
      - release/[0-9]+.[0-9]+.[0-9]+
      # OPS-1664 naming convention <branch>/<JIRA-Ticket ID>-<Jira_Summary>
      - hotfix/[A-Z]+-[0-9]+-[a-zA-Z_]+
      - feature/[A-Z]+-[0-9]+-[a-zA-Z_]+
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build_and_push"
  build_and_push:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      # Setting environment variables here make them available for all steps
      AVSCANFILE_REPO: schulcloud-avcheck-scanfile
      AVSCANURL_REPO: schulcloud-avcheck-scanurl
      AVSCANWEBSERVER_REPO: schulcloud-avcheck-webserver
      DOCKER_NAMESPACE: schulcloud
      AVCHECK_VERSION: ""
      DOCKER_TAG: ""

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it must be on first place to allow central setting of working directory
      - uses: actions/checkout@v2
      - name: Read version file
        # The version to be used for tagging the images is read out of the version file
        id: read_version
        uses: juliangruber/read-file-action@v1
        with:
          path: ./version
      - name: Echo version
        run: |
          echo Version of antivirus_service is '${{ steps.read_version.outputs.content }}'
          echo "AVCHECK_VERSION=${{ steps.read_version.outputs.content }}" >> $GITHUB_ENV
      - name: Assemble the Dockertag
        # Assemble the Dockertag for the build image based on the type of the branch
        # Same convention as implemented OPS-1664
        # develop -> just develop_latest
        # feature -> feature_<JIRA ID>_latest
        # release -> release_v<AVCHECK_VERSION>_latest, (??) release_v<AVCHECK_VERSION>_GITSHA
        # hotfix -> hotfix_<JIRA ID>_latest
        # master -> master_v<AVCHECK_VERSION>_latest, (??) master_v<AVCHECK_VERSION>_GITSHA
        # Use the same mechanism as in setting the version to share the DOCKER_TAG for all steps
        # TODO implement the real steps here
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Build and push Scanfile
        uses: docker/build-push-action@v2.2.1
        with:
          context: .
          file: ./Dockerfile.scanfile
          push: true
          tags: |
            ${{ env.DOCKER_NAMESPACE }}/${{ env.AVSCANFILE_REPO }}:${{ env.AVSCANFILE_REPO }}_v${{ env.AVCHECK_VERSION }}
      - name: Build and push Scanurl
        uses: docker/build-push-action@v2.2.1
        with:
          context: .
          file: ./Dockerfile.scanurl
          push: true
          tags: |
            ${{ env.DOCKER_NAMESPACE }}/${{ env.AVSCANURL_REPO }}:${{ env.AVSCANURL_REPO }}_v${{ env.AVCHECK_VERSION }}
      - name: Build and push Webserver
        uses: docker/build-push-action@v2.2.1
        with:
          context: .
          file: ./Dockerfile.webserver
          push: true
          tags: |
            ${{ env.DOCKER_NAMESPACE }}/${{ env.AVSCANWEBSERVER_REPO }}:${{ env.AVSCANWEBSERVER_REPO }}_v${{ env.AVCHECK_VERSION }}
